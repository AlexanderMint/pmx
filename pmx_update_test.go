package pmx_test

import (
	"context"
	"testing"
	"time"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/stretchr/testify/suite"
	"github.com/wcamarao/pmx"
	"github.com/wcamarao/pmx/test"
)

type UpdateSuite struct {
	suite.Suite
	conn *pgx.Conn
}

func (s *UpdateSuite) SetupTest() {
	s.conn = test.Connect()
}

func TestUpdate(t *testing.T) {
	suite.Run(t, new(UpdateSuite))
}

func (s *UpdateSuite) TestStructPointer() {
	tag, err := s.conn.Exec(
		context.Background(),
		"insert into samples (id,label) values ($1,$2)",
		"update-pointer-id",
		"update-pointer-old-label",
	)
	s.EqualValues(1, tag.RowsAffected())
	s.Nil(err)

	sample := test.Sample{
		ID:    "update-pointer-id",
		Label: "update-pointer-new-label",
	}

	tag, err = pmx.Update(context.Background(), s.conn, &sample, &pmx.UpdateOptions{
		Set: []string{"Label"},
		By:  []string{"ID"},
	})
	s.EqualValues(1, tag.RowsAffected())
	s.Nil(err)

	var id, label string
	row := s.conn.QueryRow(context.Background(), "select * from samples where id = $1", "update-pointer-id")
	err = row.Scan(&id, &label)
	s.Equal("update-pointer-id", id)
	s.Equal("update-pointer-new-label", label)
	s.Nil(err)
}

func (s *UpdateSuite) TestAutoGenerated() {
	now := time.Now().Truncate(time.Millisecond)

	row := s.conn.QueryRow(
		context.Background(),
		"insert into events (recorded_at) values ($1) returning position",
		now,
	)

	var insertedPosition int64
	err := row.Scan(&insertedPosition)
	s.Nil(err)

	event := test.Event{
		Position:   insertedPosition,
		RecordedAt: now,
	}

	tag, err := pmx.Update(context.Background(), s.conn, &event, &pmx.UpdateOptions{
		Set: []string{"RecordedAt"},
		By:  []string{"Position"},
	})
	s.EqualValues(1, tag.RowsAffected())
	s.Nil(err)

	var position int64
	var recordedAt time.Time
	row = s.conn.QueryRow(context.Background(), "select * from events where recorded_at = $1", now)
	err = row.Scan(&position, &recordedAt)
	s.Equal(insertedPosition, position)
	s.Equal(now, recordedAt)
	s.Nil(err)
}

func (s *UpdateSuite) TestReturning() {
	tag, err := s.conn.Exec(
		context.Background(),
		"insert into users (id,email,token) values ($1,$2,$3)",
		"update-returning-id",
		"update-returning-old-email",
		"update-returning-old-token",
	)
	s.EqualValues(1, tag.RowsAffected())
	s.Nil(err)

	t := "update-returning-new-token"

	user := test.User{
		ID:    "update-returning-id",
		Email: "update-returning-new-email",
		Token: &t,
	}

	tag, err = pmx.Update(context.Background(), s.conn, &user, &pmx.UpdateOptions{
		Set: []string{"Email", "Token"},
		By:  []string{"ID"},
	})
	s.Equal("update-returning-id", user.ID)
	s.Equal("update-returning-new-email", user.Email)
	s.Equal("update-returning-new-token", *user.Token)
	s.EqualValues(1, tag.RowsAffected())
	s.Nil(err)
}

func (s *UpdateSuite) TestAllowedFields() {
	tag, err := s.conn.Exec(
		context.Background(),
		"insert into users (id,email,token) values ($1,$2,$3)",
		"update-allowed-id",
		"update-allowed-old-email",
		"update-allowed-old-token",
	)
	s.EqualValues(1, tag.RowsAffected())
	s.Nil(err)

	t := "update-allowed-new-token"

	user := test.User{
		ID:    "update-allowed-id",
		Email: "update-allowed-new-email",
		Token: &t,
	}

	tag, err = pmx.Update(context.Background(), s.conn, &user, &pmx.UpdateOptions{
		Set: []string{"Email", "Token"},
		By:  []string{"ID"},
	})
	s.EqualValues(1, tag.RowsAffected())
	s.Nil(err)

	var id, email, token string
	row := s.conn.QueryRow(context.Background(), "select * from users where id = $1", "update-allowed-id")
	err = row.Scan(&id, &email, &token)
	s.Equal("update-allowed-id", id)
	s.Equal("update-allowed-new-email", email)
	s.Equal("update-allowed-new-token", token)
	s.Nil(err)
}

func (s *UpdateSuite) TestUnallowedFields() {
	tag, err := s.conn.Exec(
		context.Background(),
		"insert into users (id,email,token) values ($1,$2,$3)",
		"update-unallowed-id",
		"update-unallowed-old-email",
		"update-unallowed-old-token",
	)
	s.EqualValues(1, tag.RowsAffected())
	s.Nil(err)

	t := "update-unallowed-new-token"

	user := test.User{
		ID:    "update-unallowed-id",
		Email: "update-unallowed-new-email",
		Token: &t,
	}

	tag, err = pmx.Update(context.Background(), s.conn, &user, &pmx.UpdateOptions{
		Set: []string{"Email"},
		By:  []string{"ID"},
	})
	s.EqualValues(1, tag.RowsAffected())
	s.Nil(err)

	var id, email, token string
	row := s.conn.QueryRow(context.Background(), "select * from users where id = $1", "update-unallowed-id")
	err = row.Scan(&id, &email, &token)
	s.Equal("update-unallowed-id", id)
	s.Equal("update-unallowed-new-email", email)
	s.Equal("update-unallowed-old-token", token)
	s.Nil(err)
}

func (s *UpdateSuite) TestStructValue() {
	var sample test.Sample
	tag, err := pmx.Update(context.Background(), s.conn, sample, nil)
	s.Equal(pmx.ErrInvalidRef, err)
	s.Equal(pgconn.CommandTag{}, tag)
}

func (s *UpdateSuite) TestMapPointer() {
	var sample map[string]string
	tag, err := pmx.Update(context.Background(), s.conn, &sample, nil)
	s.Equal(pmx.ErrInvalidRef, err)
	s.Equal(pgconn.CommandTag{}, tag)
}

func (s *UpdateSuite) TestMapValue() {
	var sample map[string]string
	tag, err := pmx.Update(context.Background(), s.conn, sample, nil)
	s.Equal(pmx.ErrInvalidRef, err)
	s.Equal(pgconn.CommandTag{}, tag)
}
